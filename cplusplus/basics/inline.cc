// inline.cc
// C++ Tutorial: http://cplusplus.com/doc/tutorial/functions2/
// See also: http://www.exforsys.com/tutorials/c-plus-plus/inline-functions.html

// Tell ethe preprocessor to include the file iostream
#include <iostream>

// Load standard C++ libraries
using namespace std;

//inline functions.
// ***************
// The "inline" specifier indicates to the compiler that "inline substitution" is 
// preferred to the usual function call-mechanism for a specific function. This does 
// not change the behavior of a function itself, but is used to suggest to the compiler 
// that the code generated by the function body is inserted at EACH POINT the function 
// is called, instead of being inserted only once and perform a regular call to it.

// The format for its declaration is:
// inline type name (arguments) { instructions }
// and the function is called like any other function is called.
// Most compilers already optimize code to generate inline functions when it is 
// more convenient. This specifier only indicates the compiler that inline is PREFERRED 
// for this function.

inline int addition( int a, int b) {

  return (a+b);

} //end of: inline int addition( int a, int b) {

// main function declaration
int main() {
  
  int x=10, y=12, z;

  z = addition(x,y);
  cout << "\n z = " << z << endl;

  cout << "\n Reason for the need of Inline Function?" << endl;
  cout << "******************************************\n"<< endl;

  cout << "Normally, a function call transfers the control from the calling program (say \"int main() {\") to the function (say \"int addition(int a, int b)\" and after the execution of the program returns the control back to the calling program after the function call. These concepts of function saved program space and memory space are used because the function is stored only in one place and is ONLY executed when it is called. This concept of function execution may be time consuming since the registers and other processes must be saved before the function gets called." << endl;
 cout <<  "The extra time needed and the process of saving is valid for larger functions. If the function is SHORT, the programmer may wish to place the code of the function in the calling program in order for it to be executed. This type of function is best handled by the \"inline\" function. In this situation, the programmer may be wondering \"why not write the short code repeatedly inside the program wherever needed instead of going for inline function?\" Although this could accomplish the task, the problem lies in the loss of clarity of the program. If the programmer repeats the same code many times, there will be a loss of clarity in the program. The alternative approach is to allow inline functions to achieve the same purpose, with the concept of functions." << endl;

 cout << "\n ***** Summary: The \"inline\" function declaration is useful in the case when a SHORT function is called often by the main program. The bottom line is that is saves time and resources *****" << endl;



  cout << "\n Program Termination!" << endl;
  return 0;

}  // end of: int main () {
